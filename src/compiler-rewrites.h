#ifndef COMPILER_REWRITES_H
#define COMPILER_REWRITES_H
// *****************************************************************************
// compiler-rewrites.h                                                XL project
// *****************************************************************************
//
// File description:
//
//     Compiler implementation of rewrite calls
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2010-2012,2015-2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2012, Jérôme Forissier <jerome@taodyne.com>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

#include "rewrites.h"
#include "compiler.h"
#include "renderer.h"

#include <recorder/recorder.h>

XL_BEGIN

class CompilerTypes;

struct CompilerRewriteCandidate : public RewriteCandidate
// ----------------------------------------------------------------------------
//    A rewrite candidate generated by the compiler
// ----------------------------------------------------------------------------
//    This has additional machine-type information
{
    CompilerRewriteCandidate(Infix *rewrite, Scope *scope, CompilerTypes *);
    virtual ~CompilerRewriteCandidate();

    // Machine-level information
    JIT::Function_p     Prototype(JIT &jit);
    JIT::FunctionType_p FunctionType(JIT &jit);
    JIT::Signature      RewriteSignature();
    JIT::Type_p         RewriteType();
    void                RewriteType(JIT::Type_p type);

    // Access to the underlying fields
    CompilerTypes *     Arguments()
    {
        return (CompilerTypes *) RewriteCandidate::Arguments();
    }
    CompilerTypes *     Parameters()
    {
        return (CompilerTypes *) RewriteCandidate::Parameters();
    }

public:
    GARBAGE_COLLECT(CompilerRewriteCandidate);
};


struct CompilerRewriteCalls : public RewriteCalls
// ----------------------------------------------------------------------------
//   Identify the way to invoke rewrites for a particular form
// ----------------------------------------------------------------------------
{
    CompilerRewriteCalls(CompilerTypes *ti);
    virtual ~CompilerRewriteCalls();
    virtual CompilerRewriteCandidate *Candidate(size_t nth);

public:
    GARBAGE_COLLECT(CompilerRewriteCalls);
};

XL_END

#endif // COMPILER_REWRITES_H
